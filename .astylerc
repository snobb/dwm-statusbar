# use kr kernel style
style=java

# indenet with spaces
indent=spaces=4

# max line length
max-code-length=98

# Set the  maximum of # spaces to indent a continuation line
max-instatement-indent=98

# indent classes, so that public/private labels are indented
# indent-classes

# Attach braces to class and struct inline function definitions.
attach-inlines

# put closing while on the same line as the block bracket.
attach-closing-while

# Indent 'switch' blocks so that the 'case X:' statements are indented in the
# switch block.
indent-switches

# Indent 'case X:' blocks from the 'case X:' headers
# indent-cases

# leave condition on the previous line
break-after-logical

# pad operators a=b -> a = b
pad-oper

# pad statements like 'if', 'for', 'while', so if(a) -> if (a)
pad-header

# add space after a comma
pad-comma
unpad-paren

# break one line if/while statements.
break-one-line-headers

# remove unnecessary padding around parentesis
unpad-paren

# pointer is aligned to the var name. Eg. char *ptr
align-pointer=name

# reference is aligned to the var name. Eg. vector<int> &ptr
align-reference=name

# indent multiline preprocessor defines
indent-preproc-define
indent-preproc-block

# insert empty lines around blocks
# break-blocks

# Delete empty lines within a function or method.
# delete-empty-lines

# add brackets in 1 line 'if', 'for' and 'while' statements
add-brackets
add-braces

# add brackets even to one-line statements
add-one-line-brackets

# keep oneline statements unchanged
keep-one-line-statements

# else is on a separate line
# break-closing-brackets
# break-elseifs

# Break the return type from the function name.
# break-return-type
attach-return-type

# bracket on the same line as namespaces
attach-namespaces

# indent one-line comments
indent-col1-comments

# add 2 indents when breaking a long line (VER >= 2.6)
# indent-continuation=2
